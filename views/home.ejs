
<div class="container">
  <h2>Idea</h2>
  <p>
    This is a simple example <a href="http://sailsjs.org/">sails</a> application, that we can use for the hackathon.
    <br>It is a MVC quite simple to understand and it does some things that can be usefull for us at the hackathon.
  </p>
  <p>
  </p>
  <h2>Database Connection</h2>
  <p>
    It connects to a postgres database configured in <code>config/env/development.js</code> and <code>config/connections.js</code> <br>
    <code>config/connections.js</code>:
    <pre>
      PostgresqlServer: {
        adapter: 'sails-postgresql',
        host: 'localhost',
        port: 5433,
        user: 'postgres',
        password: 'postgres',
        database: 'hackathon'
      }
    </pre>


    If we manage to host a postgres DB <a href="http://sailsjs.org/documentation/reference/configuration/sails-config-connections" title="see example">remotely</a> , we can work on the same data/database in different ways:
    <ul>
      <li>With Clients (the CLI of psql or the GUI PgAdmin III) we can fill the Database, manipulate data and develop custom quieries.</li>
      <li>With this sails app in order to make a GUI in HTML5/JavaScript.</li>
    </ul>
    <h2>Everything to make a API and a GUI</h2>
    <h3>Model</h3>
    In sails, the programmatic access to the database is defined in the model here <code>api/models</code>. The Model maps a DB-Table.
    This sample sails application expects a table "article" with those attributes defined in <code>api/models/Article.js</code>:
    <br><br>
    <pre>
      module.exports = {
        attributes: {
          title: 'string',
          text: 'string',
          category: 'string'
        }
      };
    </pre>

  </p>

  <h3>Controller (Api and Actions/Queries)</h3>
  The controller does
  <ul>
    <li>
      generate a Api for the Model/DB-Table. This API is described here <a href="http://sailsjs.org/documentation/reference/blueprint-api">Blueprint API</a> (Tipp: look at subchapters like find where to understand better).<br>
      Behind the scenes the blueprint actions do exequte sql queries to the database and respond in json format.
    </li>
    <li>
      Important for us: In addition to the blueprint actions we can create custom Api's that do for example execute our custom sql-queries to the database. Example: <code>api/controllers/ArticleController.js</code>
    </li>
  </ul>
  <h3>Views</h3>
  <p>
    The views are defined in the <code>views</code> directory. To match a URL with a view we have to configure <code>config/routes.js</code>.
    By default the layout.ejs wraps around other views and does embed dependencies like css and js.
  </p>
  <h3>Dependencies</h3>
  <p>
    Dependencies like js, css libraries are embedded to the view, when the are included in the corresponding sub directory of <code>assets</code>.
    If the order of the embedded dependencies matters, we can define this here <code>tasks/pipeline.js</code>.
  </p>

  <h3>Some links to demonstrate the above</h3>
  <ul class="list-group">
    <li class="list-group-item">
      <a href="/admin">admin</a> <br>
      The link points to a route in <code>config/routes.js</code> that points to the view <code>admin.ejs</code>. The admin.ejs includes a <a href="http://ng-admin-book.marmelab.com/">ng-admin interface</a> that uses the Blueprint API of the model Article.
    </li>
    <li class="list-group-item">
      <a href="/foo">foo</a> <br>
      The link points to a route in <code>config/routes.js</code> that points to the view <code>foo.ejs</code>. The foo.ejs includes a angular directive called "bar".
    </li>
    <li class="list-group-item">
      <a href="/article/customquery">Custom Api with custom SQL-Query</a> <br>
      This Link points to a custom Api named "customquery" defined in <code>api/controllers/ArticleController.js</code>
    </li>
  </ul>
</div>
